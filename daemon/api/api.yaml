openapi: 3.0.0
info:
  title: opensvc agent api
  version: 3.9.1
#servers:
#  - url: https://localhost:1215
paths:
  /auth/token:
    post:
      operationId: PostAuthToken
      tags:
        - auth
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Roles'
        - in: query
          name: duration
          description: max token duration, maximum value 24h
          schema:
            type: string
            example: 10m
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
  /cluster/abort:
    post:
      operationId: PostClusterActionAbort
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /cluster/freeze:
    post:
      operationId: PostClusterActionFreeze
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /cluster/unfreeze:
    post:
      operationId: PostClusterActionUnfreeze
      tags:
        - cluster
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /daemon/dns/dump:
    get:
      operationId: GetDaemonDNSDump
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Dump the cluster DNS zone content.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSZone'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/logs/control:
    post:
      operationId: PostDaemonLogsControl
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: set daemon log level
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDaemonLogsControl'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/events:
    get:
      operationId: GetDaemonEvents
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Listen daemon events
      parameters:
        - $ref: '#/components/parameters/Duration'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/EventFilter'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/EventList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/join:
    post:
      operationId: PostDaemonJoin
      description: |
        Register a join request to add a new cluster node member.
        The authenticated client requires at least grant 'root' or 'Join'.

        Processing of the join request is done asynchronously by daemon, http response is sent
        when the join request has been published with label: node=<api_node>

        To follow processing of the join request, you have to watch following events:
        - JoinSuccess,node=<api_node>,added=<node> (the new node has been added to cluster nodes)
        - JoinIgnored,node=<api_node>,join-node=<node> (the new node was already a cluster node)
        - JoinError,node=<api_node>,join-node=<node> (an error occur during update cluster node list)
      tags:
        - daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: node
          description: The node to add to cluster nodes
          required: true
          schema:
            type: string
            example: new_node
            minLength: 2
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/leave:
    post:
      operationId: PostDaemonLeave
      description: |
        Register a leave request to remove a cluster node member.
        The authenticated client requires at least grant 'root' or 'Leave'.

        Processing of the leave request is done asynchronously by daemon, http response is sent
        when the leave request has been published with label: node=<api_node>

        To follow processing of the leave request, you have to watch following events:
        - LeaveSuccess,node=<api_node>,removed=<node> (node has been removed to cluster nodes)
        - LeaveIgnored,node=<api_node>,leave-node=<node> (node is not a cluster node)
        - LeaveError,node=<api_node>,leave-node=<node> (an error occur during update cluster node list)
      tags:
        - daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: node
          description: The leaving cluster node
          required: true
          schema:
            type: string
            example: node-wto-remove
            minLength: 2
      responses:
        200:
          description: OK
  /daemon/restart:
    post:
      description: restart the daemon
      operationId: PostDaemonRestart
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/running:
    get:
      operationId: GetDaemonRunning
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/status:
    get:
      operationId: GetDaemonStatus
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NamespaceOptional'
        - $ref: '#/components/parameters/SelectorOptional'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonStatus'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/stop:
    post:
      operationId: PostDaemonStop
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /daemon/sub/action:
    post:
      operationId: PostDaemonSubAction
      tags:
        - daemon
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      requestBody:
        description: action on daemon sub components
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDaemonSubAction'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  # ========================================================================
  # instance paths
  # ========================================================================

  /instances:
    get:
      operationId: GetInstances
      tags:
        - instances
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PathOptional'
        - $ref: '#/components/parameters/NodeOptional'
      responses:
        200:
          description: get instance config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: PostInstanceStatus
      tags:
        - instances
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: post object status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceStatusItem'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /namespaces/{namespace}/{kind}/{name}:
    get:
      operationId: GetObject
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'


  # ========================================================================
  # network paths
  # ========================================================================

  /networks:
    get:
      operationId: GetNetworks
      tags:
        - networks
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          description: the name of a cluster backend network
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /network/ip:
    get:
      operationId: GetNetworkIp
      tags:
        - networks
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a cluster backend network
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkIpList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  # ========================================================================
  # node paths
  # ========================================================================

  /nodes:
    get:
      operationId: GetNodes
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeOptional'
      responses:
        200:
          description: get node config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /node/drain:
    post:
      operationId: PostNodeActionDrain
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /node/drbd/allocation:
    get:
      operationId: GetNodeDRBDAllocation
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRBDAllocation'
        500:
          $ref: '#/components/responses/500'
  /node/clear:
    post:
      operationId: PostNodeClear
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Clears errors (for example, failed) in the node monitor state.
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /node/drbd/config:
    get:
      operationId: GetNodeDRBDConfig
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DRBDConfigName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRBDConfig'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: PostNodeDRBDConfig
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DRBDConfigName'
      requestBody:
        description: monitor
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PostNodeDRBDConfigRequest'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /node/backlogs:
    get:
      operationId: GetNodeBacklogs
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve recent logs
      parameters:
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/Paths'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /node/logs:
    get:
      operationId: GetNodeLogs
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve new logs
      parameters:
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/Paths'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /nodes/info:
    get:
      operationId: GetNodesInfo
      tags:
        - nodes
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesInfo'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /objects:
    get:
      operationId: GetObjects
      tags:
        - objects
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        List all objects in the cluster.
      parameters:
        - $ref: '#/components/parameters/PathOptional'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /instances/backlogs:
    get:
      operationId: GetInstancesBacklogs
      tags:
        - instances
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve recent logs
      parameters:
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/Paths'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /instances/logs:
    get:
      operationId: GetInstancesLogs
      tags:
        - instances
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve new logs
      parameters:
        - $ref: '#/components/parameters/LogFilter'
        - $ref: '#/components/parameters/Paths'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/instance/backlogs:
    get:
      operationId: GetInstanceBacklogs
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve recent logs
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/LogFilter'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/instance/logs:
    get:
      operationId: GetInstanceLogs
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      description: |
        Serve new logs
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/LogFilter'
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/LogList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/instance/clear:
    post:
      operationId: PostInstanceClear
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      description: Clear an error ("start failed" for example) in the instance monitor state.
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/instance/progress:
    post:
      operationId: PostInstanceProgress
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        description: Change the instance monitor state to reflect the progress of actions the daemon did not started.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInstanceProgress'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /object/paths:
    get:
      operationId: GetObjectPaths
      tags:
        - objects
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Path'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPaths'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/abort:
    post:
      operationId: PostObjectActionAbort
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/config:
    get:
      operationId: GetObjectConfig
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
        - $ref: '#/components/parameters/Evaluate'
        - $ref: '#/components/parameters/Impersonate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectConfig'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/file:
    get:
      operationId: GetObjectFile
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectFile'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/delete:
    post:
      operationId: PostObjectActionDelete
      tags:
        - object / svc
        - object / vol
        - object / cfg
        - object / sec
        - object / usr
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/freeze:
    post:
      operationId: PostObjectActionFreeze
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/giveback:
    post:
      operationId: PostObjectActionGiveback
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/provision:
    post:
      operationId: PostObjectActionProvision
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/purge:
    post:
      operationId: PostObjectActionPurge
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/start:
    post:
      operationId: PostObjectActionStart
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/stop:
    post:
      operationId: PostObjectActionStop
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/switch:
    post:
      operationId: PostObjectActionSwitch
      tags:
        - object / svc
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostObjectActionSwitch'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/unfreeze:
    post:
      operationId: PostObjectActionUnfreeze
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /namespaces/{namespace}/{kind}/{name}/unprovision:
    post:
      operationId: PostObjectActionUnprovision
      tags:
        - object / svc
        - object / vol
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/inPathNamespace'
        - $ref: '#/components/parameters/inPathKind'
        - $ref: '#/components/parameters/inPathName'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationQueued'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        408:
          $ref: '#/components/responses/408'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'
  /pools:
    get:
      operationId: GetPools
      tags:
        - pools
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a backend storage pool
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /pool/volumes:
    get:
      operationId: GetPoolVolumes
      tags:
        - pools
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - in: query
        name: name
        description: the name of a backend storage pool
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolVolumeList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /public/openapi:
    get:
      operationId: GetSwagger
      tags:
        - public
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /relay/message:
    get:
      operationId: GetRelayMessage
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RelayNodename'
        - $ref: '#/components/parameters/RelayClusterId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelayMessages'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: PostRelayMessage
      tags:
        - daemon
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        description: post a node dataset from a relay heartbeat
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRelayMessage'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /resources:
    get:
      operationId: GetResources
      tags:
        - resources
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PathOptional'
        - $ref: '#/components/parameters/NodeOptional'
        - $ref: '#/components/parameters/RidOptional'
      responses:
        200:
          description: get resource config, monitor and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  schemas:
    ArbitratorStatus:
      type: object
      required:
        - url
        - status
      properties:
        url:
          type: string
        status:
          $ref: '#/components/schemas/Status'
    AuthToken:
      type: object
      required:
        - expired_at
        - token
      properties:
        expired_at:
          type: string
          format: date-time
        token:
          type: string
    Cluster:
      type: object
      required:
        - config
        - node
        - object
        - status
      properties:
        config:
          $ref: '#/components/schemas/ClusterConfig'
        node:
          $ref: '#/components/schemas/ClusterNode'
        object:
          $ref: '#/components/schemas/ClusterObject'
        status:
          $ref: '#/components/schemas/ClusterStatus'
    ClusterConfig:
      type: object
    ClusterNode:
      type: object
    ClusterObject:
      type: object
    ClusterStatus:
      type: object
    Daemon:
      type: object
      required:
        - collector
        - dns
        - hb
        - listener
        - monitor
        - routines
        - scheduler
      properties:
        collector:
          $ref: '#/components/schemas/DaemonCollector'
        dns:
          $ref: '#/components/schemas/DaemonDNS'
        hb:
          $ref: '#/components/schemas/DaemonHb'
        listener:
          $ref: '#/components/schemas/DaemonListener'
        monitor:
          $ref: '#/components/schemas/DaemonMonitor'
        routines:
          type: integer
        scheduler:
          $ref: '#/components/schemas/DaemonScheduler'
    DaemonCollector:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
    DaemonDNS:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
    DaemonHb:
      type: object
      required:
        - streams
        - modes
      properties:
        streams:
          type: array
          items:
            $ref: '#/components/schemas/DaemonHbStream'
        modes:
          type: array
          items:
            $ref: '#/components/schemas/DaemonHbMode'
    DaemonHbStream:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
        - $ref: '#/components/schemas/DaemonHbStreamType'
        - $ref: '#/components/schemas/DaemonHbStreamPeer'
    DaemonHbMode:
      type: object
      required:
        - node
        - mode
        - type
      properties:
        node:
          type: string
          description: a cluster node
        mode:
          type: string
          description: the type of hb message used by node except when Type is patch where it is the patch queue length
        type:
          type: string
          description: the heartbeat message type used by node
    DaemonHbStreamType:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: hb stream type
    DaemonHbStreamPeer:
      type: object
      required:
        - is_beating
        - last_at
      properties:
        is_beating:
          type: boolean
        last_at:
          type: string
          format: date-time
    DaemonListener:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
    DaemonMonitor:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
    DaemonScheduler:
      allOf:
        - $ref: '#/components/schemas/DaemonSubsystemStatus'
    DaemonSubsystemAlert:
      type: object
      required:
        - message
        - severity
      properties:
        message:
          type: string
        severity:
          type: string
    DaemonSubsystemStatus:
      type: object
      required:
        - alerts
        - configured
        - created_at
        - id
        - state
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/DaemonSubsystemAlert'
        configured:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        id:
          type: string
        state:
          type: string
    DNSRecord:
      type: object
      required:
        - name
        - type
        - class
        - ttl
        - data
      properties:
        name:
          type: string
        type:
          type: string
        class:
          type: string
        ttl:
          type: integer
        data:
          type: string
    DNSZone:
      type: array
      items:
        $ref: '#/components/schemas/DNSRecord'
    DRBDAllocation:
      type: object
      required:
        - port
        - minor
        - expired_at
        - id
      properties:
        id:
          type: string
          format: uuid
        port:
          type: integer
        minor:
          type: integer
        expired_at:
          type: string
          format: date-time

    InstanceMeta:
      type: object
      required:
        - object
        - node
      properties:
        object:
          type: string
        node:
          type: string
    InstanceConfig:
      x-go-type: instance.Config
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - app
        - checksum
        - children
        - drp
        - env
        - flex_max
        - flex_min
        - flex_target
        - monitor_action
        - pre_monitor_action
        - nodename
        - orchestrate
        - path
        - parents
        - placement_policy
        - priority
        - resources
        - scope
        - subsets
        - topology
        - updated_at
      properties:
        app:
          type: string
        checksum:
          type: string
        children:
          type: array
          items:
            type: string
        drp:
          type: boolean
        env:
          type: string
        flex_max:
          type: integer
        flex_min:
          type: integer
        flex_target:
          type: integer
        monitor_action:
          type: string
        pre_monitor_action:
          type: string
        nodename:
          type: string
        orchestrate:
          $ref: '#/components/schemas/Orchestrate'
        path:
          type: string
        parents:
          type: array
          items:
            type: string
        pool:
          type: string
        placement_policy:
          $ref: '#/components/schemas/PlacementPolicy'
        priority:
          type: integer
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceConfig'
        scope:
          type: array
          items:
            type: string
        size:
          type: integer
          format: int64
        subsets:
          $ref: '#/components/schemas/SubsetsConfig'
        topology:
          $ref: '#/components/schemas/Topology'
        updated_at:
          type: string
          format: date-time
    InstanceMonitor:
      x-go-type: instance.Monitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - global_expect
        - global_expect_updated_at
        - global_expect_options
        - is_leader
        - is_ha_leader
        - local_expect
        - local_expect_updated_at
        - orchestration_id
        - orchestration_is_done
        - session_id
        - state
        - state_updated_at
        - monitor_action_executed_at
        - is_preserved
        - resources
        - updated_at
        - parents
        - children
      properties:
        global_expect:
          type: string
        global_expect_updated_at:
          type: string
          format: date-time
        global_expect_options:
          type: object
        is_leader:
          type: boolean
        is_ha_leader:
          type: boolean
        local_expect:
          type: string
        local_expect_updated_at:
          type: string
          format: date-time
        orchestration_id:
          type: string
        orchestration_is_done:
          type: boolean
        session_id:
          type: string
        state:
          type: string
        state_updated_at:
          type: string
          format: date-time
        monitor_action_executed_at:
          type: string
          format: date-time
        is_preserved:
          type: boolean
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceMonitor'
        updated_at:
          type: string
          format: date-time
        parents:
          type: object
        children:
          type: object
    InstanceStatusItem:
        type: object
        required:
          - meta
          - data
        properties:
          meta:
            $ref: '#/components/schemas/InstanceMeta'
          data:
            $ref: '#/components/schemas/InstanceStatus'
    InstanceStatus:
      x-go-type: instance.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - avail
        - constraints
        - csum
        - frozen_at
        - last_started_at
        - optional
        - overall
        - is_preserved
        - provisioned
        - resources
        - running
        - scale
        - updated_at
      properties:
        avail:
          $ref: '#/components/schemas/Status'
        constraints:
          type: boolean
        csum:
          type: string
        frozen_at:
          type: string
          format: date-time
        last_started_at:
          type: string
          format: date-time
        optional:
          $ref: '#/components/schemas/Status'
        overall:
          $ref: '#/components/schemas/Status'
        is_preserved:
          type: boolean
          description: |
            preserve is true if this status has not been updated due to a
            heartbeat downtime covered by a maintenance period.
            when the maintenance period ends, the status should be unchanged,
            and preserve will be set to false.
          default: false
        provisioned:
          $ref: '#/components/schemas/Provisioned'
        resources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceStatus'
        running:
          type: array
          items:
            type: string
        scale:
          type: integer
        updated_at:
          type: string
          format: date-time
    Network:
      type: object
      required:
        - name
        - type
        - network
        - usage
        - free
        - used
        - size
      properties:
        name:
          type: string
        type:
          type: string
        network:
          type: string
        errors:
          type: array
          items:
            type: string
        free:
          type: integer
        used:
          type: integer
        size:
          type: integer
    NetworkIpNetwork:
      type: object
      required:
        - name
        - type
        - network
      properties:
        name:
          type: string
        type:
          type: string
        network:
          type: string
    NetworkList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/NetworkItems'
    NetworkItems:
      type: array
      items:
        $ref: '#/components/schemas/Network'
    NetworkIp:
      type: object
      required:
        - ip
        - node
        - path
        - rid
        - network
      properties:
        ip:
          type: string
        node:
          type: string
        path:
          type: string
        rid:
          type: string
        network:
          $ref: '#/components/schemas/NetworkIpNetwork'
    NetworkIpList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/NetworkIpItems'
    NetworkIpItems:
      type: array
      items:
        $ref: '#/components/schemas/NetworkIp'

    # ========================================================================
    # node schemas
    # ========================================================================

    NodeList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/NodeItems'
    Node:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/NodeConfig'
        monitor:
          $ref: '#/components/schemas/NodeMonitor'
        status:
          $ref: '#/components/schemas/NodeStatus'
    NodeItems:
      type: array
      items:
        $ref: '#/components/schemas/NodeItem'
    NodeItem:
        type: object
        required:
          - kind
          - meta
          - data
        properties:
          kind:
            type: string
          meta:
            $ref: '#/components/schemas/NodeMeta'
          data:
            $ref: '#/components/schemas/Node'
    NodeConfig:
      x-go-type: node.Config
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - env
        - maintenance_grace_period
        - ready_period
        - rejoin_grace_period
        - split_action
      properties:
        env:
          type: string
        maintenance_grace_period:
          type: string
          format: duration
        ready_period:
          type: string
          format: duration
        rejoin_grace_period:
          type: string
          format: duration
        split_action:
          type: string
    NodeMonitor:
      x-go-type: node.Monitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - global_expect
        - global_expect_updated_at
        - local_expect
        - local_expect_updated_at
        - orchestration_id
        - orchestration_is_done
        - session_id
        - state
        - state_updated_at
        - updated_at
      properties:
        global_expect:
          type: string
        global_expect_updated_at:
          type: string
          format: date-time
        local_expect:
          type: string
        local_expect_updated_at:
          type: string
          format: date-time
        orchestration_id:
          type: string
        orchestration_is_done:
          type: boolean
        session_id:
          type: string
        state:
          type: string
        state_updated_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NodeStatus:
      x-go-type: node.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/node
      type: object
      required:
        - agent
        - api
        - arbitrators
        - compat
        - frozen_at
        - gen
        - min_avail_mem
        - min_avail_swap
        - is_speaker
        - labels
      properties:
        agent:
          type: string
        api:
          type: string
        arbitrators:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ArbitratorStatus'
        compat:
          type: boolean
        frozen_at:
          type: string
          format: date-time
        gen:
          additionalProperties:
            type: integer
        min_avail_mem:
          type: integer
        min_avail_swap:
          type: integer
        is_speaker:
          type: boolean
        labels:
          type: object
    NodeInfo:
      type: object
      required:
        - labels
        - nodename
        - paths
      properties:
        labels:
          type: array
          description: labels is the list of node labels.
          items:
            $ref: '#/components/schemas/NodeLabel'
        nodename:
          type: string
          description: nodename is the name of the node where the labels and paths are coming from.
        paths:
          type: array
          description: paths is the list of node to storage array san paths.
          items:
            $ref: '#/components/schemas/SANPath'
    NodeLabel:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: name is the label name.
        value:
          type: string
          description: value is the label value.
    NodeMeta:
      type: object
      required:
        - node
      properties:
        node:
          type: string
    NodesInfo:
      type: array
      items:
        $ref: '#/components/schemas/NodeInfo'

    # ========================================================================
    # object schemas
    # ========================================================================

    ObjectList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/ObjectItems'
    ObjectItems:
      type: array
      items:
        $ref: '#/components/schemas/ObjectItem'
    ObjectItem:
        type: object
        required:
          - kind
          - meta
          - data
        properties:
          kind:
            type: string
          meta:
            $ref: '#/components/schemas/ObjectMeta'
          data:
            $ref: '#/components/schemas/ObjectData'
    ObjectConfig:
      type: object
      required:
        - data
        - mtime
      properties:
        data:
          type: object
        mtime:
          type: string
          format: date-time
    ObjectFile:
      type: object
      required:
        - data
        - mtime
      properties:
        data:
          type: string
          format: byte
        mtime:
          type: string
          format: date-time
    ObjectMeta:
      type: object
      required:
        - object
      properties:
        object:
          type: string
    ObjectPaths:
      type: array
      items:
        type: string
    ObjectData:
      type: object
      required:
        - avail
        - flex_max
        - flex_min
        - flex_target
        - frozen
        - instances
        - orchestrate
        - overall
        - placement_policy
        - placement_state
        - priority
        - provisioned
        - scope
        - topology
        - up_instances_count
        - updated_at
      properties:
        avail:
          $ref: '#/components/schemas/Status'
        flex_max:
          type: integer
        flex_min:
          type: integer
        flex_target:
          type: integer
        frozen:
          type: string
        instances:
          $ref: '#/components/schemas/InstanceMap'
        orchestrate:
          $ref: '#/components/schemas/Orchestrate'
        overall:
          $ref: '#/components/schemas/Status'
        placement_policy:
          $ref: '#/components/schemas/PlacementPolicy'
        placement_state:
          $ref: '#/components/schemas/PlacementState'
        pool:
          type: string
        priority:
          type: integer
        provisioned:
          $ref: '#/components/schemas/Provisioned'
        scope:
          type: array
          items:
            type: string
        size:
          type: integer
          format: int64
        topology:
          $ref: '#/components/schemas/Topology'
        up_instances_count:
          type: integer
        updated_at:
          type: string
    Orchestrate:
      type: string
      enum:
        - ha
        - no
        - start
      default: no
    OrchestrationQueued:
      type: object
      properties:
        orchestration_id:
          type: string
          format: uuid
      required:
        - orchestration_id
    PathRelation:
      type: array
      items:
        type: string
        description: object naming or an instance naming (naming@node)
    PlacementPolicy:
      type: string
      default: none
      description: object placement policy
      enum:
        - last start
        - load avg
        - nodes order
        - none
        - score
        - spread
        - shift
    PlacementState:
      type: string
      description: object placement state
      enum:
        - optimal
        - non-optimal
        - n/a
        - undef
    PostDaemonLogsControl:
      type: object
      required:
        - level
      properties:
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
            - fatal
            - panic
            - none
          default: info
    PostDaemonSubAction:
      type: object
      required:
        - action
        - subs
      properties:
        action:
          type: string
          enum:
            - start
            - stop
        subs:
          type: array
          description: daemon component list
          items:
            type: string
            example: hb#1.rx
    PostNodeDRBDConfigRequest:
      type: object
      required:
        - allocation_id
        - data
      properties:
        allocation_id:
          type: string
          format: uuid
        data:
          type: string
          format: byte
    PostInstanceProgress:
      type: object
      required:
        - session_id
        - state
      properties:
        session_id:
          type: string
          format: uuid
        state:
          type: string
        is_partial:
          type: boolean

    # ========================================================================
    # instance schemas
    # ========================================================================

    InstanceList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/InstanceItems'
    Instance:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/InstanceConfig'
        monitor:
          $ref: '#/components/schemas/InstanceMonitor'
        status:
          $ref: '#/components/schemas/InstanceStatus'
    InstanceItems:
      type: array
      items:
        $ref: '#/components/schemas/InstanceItem'
    InstanceItem:
        type: object
        required:
          - kind
          - meta
          - data
        properties:
          kind:
            type: string
          meta:
            $ref: '#/components/schemas/InstanceMeta'
          data:
            $ref: '#/components/schemas/Instance'
    InstanceMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Instance'

    Kind:
      x-go-type: naming.Kind
      x-go-type-import:
          path: github.com/opensvc/om3/core/naming
      type: string
      enum:
        - svc
        - vol
        - cfg
        - sec
        - usr
        - nscfg
        - ccfg

    # ========================================================================
    # pool schemas
    # ========================================================================

    PoolList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/PoolItems'
    PoolItems:
      type: array
      items:
        $ref: '#/components/schemas/Pool'
    Pool:
      type: object
      required:
        - name
        - type
        - head
        - capabilities
        - volume_count
        - free
        - used
        - size
      properties:
        name:
          type: string
        type:
          type: string
        head:
          type: string
        capabilities:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        free:
          type: integer
          format: int64
        used:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        volume_count:
          type: integer

    # ========================================================================
    # pool volume schemas
    # ========================================================================

    PoolVolumeList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/PoolVolumeItems'
    PoolVolumeItems:
      type: array
      items:
        $ref: '#/components/schemas/PoolVolume'
    PoolVolume:
      type: object
      required:
        - pool
        - path
        - children
        - is_orphan
        - size
      properties:
        pool:
          type: string
        path:
          type: string
        children:
          type: array
          items:
            type: string
        is_orphan:
          type: boolean
        size:
          type: integer
          format: int64
    PostObjectActionSwitch:
      type: object
      required:
        - destination
      properties:
        destination:
          type: array
          minItems: 1
          items:
            type: string
    PostRelayMessage:
      type: object
      required:
        - cluster_id
        - cluster_name
        - msg
        - nodename
      properties:
        cluster_id:
          type: string
        cluster_name:
          type: string
        nodename:
          type: string
        msg:
          type: string
    Problem:
      type: object
      properties:
        detail:
          description: |
            A human-readable explanation specific to this occurrence of the
            problem.
          type: string
        status:
          type: integer
          description: |
            The HTTP status code ([RFC7231], Section 6) generated by the
            origin server for this occurrence of the problem.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.  It SHOULD
            NOT change from occurrence to occurrence of the problem, except
            for purposes of localization (e.g., using proactive content
            negotiation; see [RFC7231], Section 3.4).
      required:
        - detail
        - status
        - title
    Provisioned:
      type: string
      description: service, instance or resource provisioned state
      enum:
        - false
        - mixed
        - n/a
        - true
    RelayMessage:
      type: object
      required:
        - addr
        - cluster_id
        - cluster_name
        - msg
        - nodename
        - updated_at
      properties:
        addr:
          type: string
        cluster_id:
          type: string
        cluster_name:
          type: string
        msg:
          type: string
        nodename:
          type: string
        updated_at:
          type: string
          format: date-time
    RelayMessageList:
      type: array
      items:
        $ref: '#/components/schemas/RelayMessage'
    RelayMessages:
      type: object
      required:
        - messages
      properties:
        messages:
          $ref: '#/components/schemas/RelayMessageList'

    # ========================================================================
    # resource schemas
    # ========================================================================

    ResourceList:
      type: object
      required:
        - items
        - kind
      properties:
        kind:
          type: string
        items:
          $ref: '#/components/schemas/ResourceItems'
    Resource:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ResourceConfig'
        monitor:
          $ref: '#/components/schemas/ResourceMonitor'
        status:
          $ref: '#/components/schemas/ResourceStatus'
    ResourceItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceItem'
    ResourceItem:
        type: object
        required:
          - kind
          - meta
          - data
        properties:
          kind:
            type: string
          meta:
            $ref: '#/components/schemas/ResourceMeta'
          data:
            $ref: '#/components/schemas/Resource'
    ResourceConfig:
      x-go-type: instance.ResourceConfig
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - is_disabled
        - is_monitored
        - is_standby
        - restart
        - restart_delay
      properties:
        is_disabled:
          type: boolean
        is_monitored:
          type: boolean
        is_standby:
          type: boolean
        restart:
          type: integer
        restart_delay:
          type: string
          format: duration
    ResourceId:
      type: string
    ResourceLog:
      type: array
      items:
        $ref: '#/components/schemas/ResourceLogEntry'
    ResourceLogEntry:
      type: object
      required:
        - level
        - message
      properties:
        level:
          type: string
        message:
          type: string
    ResourceProvisionStatus:
      type: object
      required:
        - state
        - mtime
      properties:
        mtime:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/Provisioned'
    ResourceMeta:
      type: object
      required:
        - node
        - object
        - rid
      properties:
        node:
          type: string
        object:
          type: string
        rid:
          type: string
    ResourceMonitor:
      x-go-type: instance.ResourceMonitor
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - restart
      properties:
        restart:
          $ref: '#/components/schemas/ResourceMonitorRestart'
    ResourceMonitorRestart:
      type: object
      required:
        - remaining
        - last_at
      properties:
        remaining:
          type: integer
        last_at:
          type: string
          format: date-time
    ResourceStatus:
      x-go-type: resource.Status
      x-go-type-import:
          path: github.com/opensvc/om3/core/resource
      type: object
      required:
        - disable
        - encap
        - info
        - label
        - log
        - monitor
        - optional
        - provisioned
        - restart
        - standby
        - status
        - subset
        - tags
        - type
      properties:
        disable:
          type: boolean
          description: hints the resource ignores all state transition actions
        encap:
          type: boolean
          description: |
            indicates that the resource is handled by the encapsulated agents,
            and ignored at the hypervisor level
        info:
          type: object
          description: |
            key-value pairs providing interesting information to collect
            site-wide about this resource
        label:
          type: string
        log:
          $ref: '#/components/schemas/ResourceLog'
        monitor:
          type: boolean
          description: |
            tells the daemon if it should trigger a monitor action when the
            resource is not up
        optional:
          type: boolean
          description: |
            is resource status aggregated into Overall instead of Avail instance status.
            Errors in optional resource don't stop a state transition action
        provisioned:
          $ref: '#/components/schemas/ResourceProvisionStatus'
        restart:
          type: integer
        standby:
          type: boolean
          description: |
            resource should always be up, even after a stop state transition action
        status:
          $ref: '#/components/schemas/Status'
        subset:
          type: string
          description: the name of the subset this resource is assigned to
        tags:
          type: array
          items:
            type: string
        type:
          type: string
    DaemonStatus:
      type: object
      required:
        - cluster
        - daemon
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
        daemon:
          $ref: '#/components/schemas/Daemon'
    LogList:
      description: responseLogList is a list of sse
      type: string
      format: binary
    EventList:
      description: responseEventList is a list of sse
      type: string
      format: binary
    DRBDConfig:
      type: object
      required:
        - data
      properties:
        data:
          type: string
          format: byte
    Role:
      type: string
      enum:
        - admin
        - blacklistadmin
        - guest
        - heartbeat
        - join
        - leave
        - root
        - squatter
    SANPath:
      type: object
      required:
        - initiator
        - target
      properties:
        initiator:
          $ref: '#/components/schemas/SANPathInitiator'
        target:
          $ref: '#/components/schemas/SANPathTarget'
    SANPathInitiator:
      type: object
      description: initiator is the host side san path endpoint.
      properties:
        name:
          type: string
          description: name is a worldwide unique path endpoint identifier.
          example: iqn.2004-10.com.ubuntu:01:e6bd4a3b554
        type:
          type: string
          description: type is the endpoint type.
          example: iscsi
    SANPathTarget:
      type: object
      description: target is the storage array side san path endpoint.
      properties:
        name:
          type: string
          description: name is a worldwide unique path endpoint identifier.
          example: iqn.2009-11.com.opensvc.srv:dev2n1.storage.target.1
        type:
          type: string
          description: type is a the endpoint type.
          example: iscsi
    Status:
      type: string
      enum:
        - up
        - down
        - warn
        - n/a
        - undef
        - stdby up
        - stdby down
    SubsetsConfig:
      type: array
      items:
        $ref: '#/components/schemas/SubsetConfig'
    SubsetConfig:
      x-go-type: instance.SubsetConfig
      x-go-type-import:
          path: github.com/opensvc/om3/core/instance
      type: object
      required:
        - parallel
      properties:
        parallel:
          type: boolean
    Topology:
      type: string
      description: "object topology"
      enum:
        - failover
        - flex
      default: failover

  parameters:

    inPathName:
      in: path
      name: name
      required: true
      schema:
        type: string
    inPathNamespace:
      in: path
      name: namespace
      required: true
      schema:
        type: string
    inPathKind:
      in: path
      name: kind
      required: true
      schema:
        $ref: '#/components/schemas/Kind'

    Evaluate:
      name: evaluate
      in: query
      description: evaluate
      schema:
        type: boolean
    Impersonate:
      name: impersonate
      in: query
      description: impersonate the evaluation as node
      schema:
        type: string
    Duration:
      name: duration
      in: query
      description: max duration
      schema:
        type: string
        example: 5s
    Paths:
      name: paths
      in: query
      description: list of object paths to send logs for
      required: true
      schema:
        type: array
        items:
          type: string
          description: object path
          example: sid=9a8e04e6-bc12-43e6-83d1-fe10d5363ea7
    LogFilter:
      name: filter
      in: query
      description: list of log filter
      schema:
        type: array
        items:
          type: string
          description: "a filter expression: label=value[,label=value]..."
          example: sid=9a8e04e6-bc12-43e6-83d1-fe10d5363ea7
    EventFilter:
      name: filter
      in: query
      description: list of event filter
      schema:
        type: array
        items:
          type: string
          description: |
            filter expression: [kind][,label=value]*
          example: ObjectStatusUpdated,naming=foo
    DRBDConfigName:
      name: name
      in: query
      description: the full naming of the file is deduced from the name
      required: true
      schema:
        type: string
    Roles:
      name: role
      in: query
      description: list of api role
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Role'
    Limit:
      name: limit
      in: query
      description: limit items count
      schema:
        type: integer
        format: int64
        example: 1
    NamespaceOptional:
      name: namespace
      in: query
      description: namespace
      schema:
        type: string
    ObjectPath:
      name: path
      in: query
      description: object path
      required: true
      schema:
        type: string
    Path:
      name: path
      in: query
      description: object selector expression.
      required: true
      schema:
        type: string
        example: db1,web*
    PathOptional:
      name: path
      in: query
      description: object selector expression.
      schema:
        type: string
        example: db1,web*
    Node:
      name: node
      in: query
      description: node selector expression.
      required: true
      schema:
        type: string
        example: n2,az=eu1
    NodeOptional:
      name: node
      in: query
      description: node selector expression.
      schema:
        type: string
        example: n2,az=eu1
    RidOptional:
      name: resource
      in: query
      description: resource selector expression.
      schema:
        type: string
        example: fs#1,ip
    RelayClusterId:
      name: cluster_id
      in: query
      description: the cluster id component of the slot id on the relay
      schema:
        type: string
    RelayNodename:
      name: nodename
      in: query
      description: the nodename component of the slot id on the relay
      schema:
        type: string
    SelectorOptional:
      name: selector
      in: query
      description: selector
      schema:
        type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '204':
      description: No Content
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '403':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '408':
      description: Request Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
