// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"77EuZaMu5Zcv/x8AAP//ErY4isjEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
