// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
