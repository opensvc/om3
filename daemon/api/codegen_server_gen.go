// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ja+v/z8AAP//SZLHr9XDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
