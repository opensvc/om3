// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
