// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
