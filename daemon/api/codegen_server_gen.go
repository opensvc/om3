// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
