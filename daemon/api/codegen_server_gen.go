// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a3MbN5J/BcW9qiRbFCVZTjbRVT44drLxni37LOWu6iyXCpxpkoiHwBjAUFK2/N+v",
	"8JrBzADzoERFsfTJFgePRneju9Hobvx7krB1zihQKSbH/57kmOM1SOD6rxfvfnrxnNEFWZ7gNahfUhAJ",
	"J7kkjE6OJ3IFaFFkGcqxXCG2QPoHkgEiAqWQFgmkaMHZWn+gaozphKienwrg15PpRP92PLGfOHwqCId0",
	"cix5AdOJSFawxmpeeZ2rdkJyQpeTz5+nkxcFxwaMJlRrfIVS9zU8n/e5mgOu8DrP1OdvxWQamPLnDVD5",
	"C8kk8PasGRFSoQBUI4UE1So8e/mxmptIWIv2oKYlgqucgxCE0WP0/iOh6Yf30wzPIftxg7MCPvz9XK2k",
	"gv/N/HdI5KnEshC/5SmWkE4ViX5cMNZeWfkD5hxf65W+ImsiQ2tcE4k0rChhBZWRBep2YdweTicLxtdY",
	"To4nhMrvnlbwECphCdwAwJZ9iM7Y8rbQjFEA0R6C69iezWY1bAuS/vgD/h4OnsJ3e/Pk8Mne0yP4bu/7",
	"o/RwbwGHB+m3R98dAf7HIMyrjSZynMAbDRzO2tBS16RjM7nvXTvohKUdszDNQwjTFBEqJKYJIAEZJJL5",
	"eJrFgGApRHYXfTLFf/wIxWFwkxnefYvlKgqTYuXItPbTGEHSOdWIFfdOXWEgnR9OL2H+9yACFDy9ZBkP",
	"11ZwiPj282ghkGRIAE3VnhRowXgHKKITR5ENWif8jrbeO8jw9fOsEBL4yzSs7RLzGZEUlYrTKT6RMak+",
	"MKr/5Gq4CCLsMBck7dmjGia1UWlUAVP79UYAuUH6wGEZdPAEzgniLIsJJvspQO3/4LCYHE/+tl9ZI/um",
	"mdhXcwbpdWr3QHyzuF0Sgcf7HF/0Z8WuImdUmJU/OThQ/ySMSqBaR+I8z0ii7Yn934WxSKrxupb2lrN5",
	"BmszSx30N/9V8azhfoWDp3cz+U84Re/gUwFChqE4vAsofqO4kCvGyR+QhsE4uhfI+P4uoLAQoDOyBlZE",
	"IPnhLiBRB4KMJEEQvr0b/nxJJXCKM3QKfAMc/cy53sUBeO6ERRQYJAH0G8UbTDI813KuAc1nJ2W0GHnG",
	"50RyLBk3Zro+fHGWA5fECBpR/t4Fle39eTopeBYW2pW2fa8bTd3QHwIYe1bI1Rn7CLQNEFzlapgLrBFZ",
	"WvHqeLEnyRqCStYN1Q2WN7TrEwLOKuc2aIk+pPbhynY3J1o1njZSh3VSOlh1scAM6/SmhHwYMW03R9MG",
	"kuwip862tqB0krO+5IoOrRYnFhWx72/KdcdaVHzcavHi5PQdJIynAcplWIgAg0wVX+HgB2cKtZlN+jug",
	"PE46tPQxobV/dKOpBcwMaoEJIfjFyen/MQqDrZkKFS2TZqr9Lc+yjCWlZyO0A0dtQJLW2hYFSUPN1oQy",
	"HkZezrgMfWlgTzdzA009UDUMQdSV3qX2Sh3xS8Dn1xKCxxQfhjiVMKxDCE1YZk3APrLpAZ6XzRV/UjGs",
	"14uTU9V+NR/W/Ne5aq1MaqAwELBXrrUiJaNk8Ipe28YKkayQhIIIc4HqlhbZUIBOy+ZtKZaVVrdCoUaM",
	"t95qAR5I/vxx+j73qYmz7M1icvx+ELTFXFwLCWsneT+UYyri3d5ov87bPLhmqfnPMPlhx3lt9VFThAjJ",
	"Aa/Hj3eq+wXPWT713PBTC3acGBbE4HLDB1k1kDpFruZoDULgJaBCQIrm1/qMi+AqgVyiyxVQdKbaEoFy",
	"LJOV+okDIlL9okYyv34qoACUAV1qr0FbjwQhweUZ36rZiOMgtIIVYC7ngGW5AL0mfxW9Msw2Wnttu5Bs",
	"6XZTFp2O4RKF/JFd3oISBR9agOvfWzxCxIXCokJPJYzmjGWAqRaOWMgRWrCBYW/0aqh+HJ9ZstdBDTPD",
	"ao7MTkHWmuiGqIfKrzxdcEuC6HWlJG5pxFNfQdzWmJGjUVKdAwaY08aYdAZAP0BtlWXHKYeJk6pczLMM",
	"jNnUkH5GLgTNVwEb4ERe91uqbhSvzwCQYtjECtSxGqOx0IAmMseVQoM81FpNOGA58ohpLNw2NiWWA4x+",
	"u/gauDU49ARuuBCW9a2g2qJtMeAch2UTpaAwcu5SIdSCKhOXUKzdk621vLQXMNsefF3/6uQ70Eh0HT0z",
	"cdhJ1nX0jrItxLk2zzTHDGU/1+ulhHWI7RprbXN7ngf5JVlB8lEU68hHkqXceDJKKHtuFKaTlOdh/QV0",
	"ExxgkcHVxRpfhU1w85XQjq8S8yXIcANL8gucuMNl0CKKnq4ZT1YgJLfbqotGb7ym6gSJuYsvGI683F7L",
	"tRrmGU5gDVRe5CwjyXWv38611505XAxARM4Ja4hiD5McBCt4Av1XF65htfFEwnIYhwlRzAXIfk+gaVZN",
	"JVnOMrbsRdCZa/d5OilMtMD2xpXaXt5m8raO2Q+G+T1W9/i6zsQtjg1Sb+pfXfksOnUXn477ApzjEdqn",
	"qqNShXoPmTUctfTBdHK1t2R7Jc8YWTR77lx35dc9snaOFcPpkyWRq2I+S9h6n+VAxSbZZ+uj/YRx2HcD",
	"aXTXJdx20tP0HSZDdauoh2ak3oHhvV6rtm3TR+Iuf1xNPdwI6DsF97WdqA4urTtlPVnc9MZGdmPJlXqk",
	"TgAqg6BhYXiqr9V7mbE5zi7gKg+D02hxwbRlJPrHuhgviKbqYLfCFxngFHhY8RLR9znnIIBvII2cPFnS",
	"vV6/wVaLqMu3C7iCpBg7RiUH1RARA7nRSFyk1o/dXrWnwFtkqynDplKrmrWUmglauRhpvdsvW2H2xrqt",
	"zu0dHBtje58BG+zaYK04IwWoG6NlDcsOpwEMdjJdY1fU9WRtkErRljJjqH58Xbp8b1NB2lG305C2c5+K",
	"9JvdSN14R6w70zpRj8AGk2z4zXPCqOI9UhcRnvxIYueqBWd/AB0r5GsyOoUFLjI5OV7gTEDzZt411Z5h",
	"XgAiCyRXRCBzjEUrLBBlEs0BKLLcjNICkGQIo3NaeXRTdkkVTChhG+DGoYvRWq0aqI6OzIETls7OqfZQ",
	"yxUEviKgqZia6CwDgVixIkvRHFBBkxWmS0in6JximqIS+EuSZaqFAKkA0yud6ZjfiG9USMxHKw0vjGoY",
	"3RUicDaiQ87ZhiiBZEjXE21RNo1qmSFnr5+vciYgrYBo7mReUGo9zSPOZAnOIHw6vPkRSu+++raye8jf",
	"MW1SezSsiNOS3z4R6tLcYaIh181atzr3WKzfrlg3g24n1U3fPqHutbqRTK+Ybuci/RVbdvsgbYMtPZAn",
	"IC8Z/xhTGMA54yMdPCQfvplr07/MQ8NF/VbU9O2AKfChcF76wVD9pnsEHZ1N6Nv3XXnUHRd2T8V8Yzxo",
	"Tjfvv/IqhsgFrUdCNGqQO/4aT7EQvQLIa+FlwSEiZPPa8YsW67kNUyB/xMSyqJ3pYmEsekrb2g5nZgui",
	"J3jDPcwnr/qO9serTqN98apTlx9efR8nTVWPmAz11tUWExG/t2cnXSw5TuDCWEt1BVrlbLX5HnB6Pb7T",
	"74zQ7SYUeUZk3IPcDG/ULs/oKhvwhyFrzNmjgdX2vrHXUcuIzzWajueTbk9jo8VW2raxk2BYj620rGZ8",
	"umBtQHWCWCg1Qv/uAlOc3tXxLOaTTtsZisxXqktQ+0VTRMr0EAuC/r9NENFgmOAZDZ2BVR89dFoP5jqr",
	"hNClzuKchXZCHk4TMgOEli0ZEpJxvASkwUcCUzPfYFScPjvRWVt90UqWKLU7AgNvlLg34sI74T/DA21f",
	"cZj6HuU1NjT9g4TUyY3tEfTP9SH0T7P+SCaDcDNubDWjHN+hUKnowDGH9lif9Tauxt27iW/bxfuF+2P/",
	"TOfq8HOz1to39oXW1PZWPlCvY5fivrHvs2HO7lx0Rv2dS5sd1OJRnJPw72X6jhkgTYnxvLytDdy1klYG",
	"UMg2V/2wDG/ZLZynS3OPFwM3cDYi4kLkgD/Grswqu6cF+5rQC+3LuljDOhKTUjYRlzgfcDwzlDJ0qVOh",
	"xFXdR7bUkQd1UFrz1pZZrmnIZr2pg6u2V7dxbFX9unbqTR1a/hHyDvapcDb28NOo6hBYvElb6ssyabOu",
	"3kDbaSU9qBsitEID0y8kg63zXu4EwrIAwHCf3pt6jFh5NzOhTEf+FGs1/wprk9xoS+5rxWrkN77S/e8C",
	"Cggkj4WMoJ5Up2aARHOEEDqqCLLGmrQZEK5U4LqgMtTIrT7DQiKzcGWI4BThjcvqE4hxcxtsBxdKSuiz",
	"Pwes7YwVWYQx9paxLBowjXM8JxkpHY6DKbqNZ3elQB2XuXcjP2y1cuuEnU42LCvWI26LqiH+R/cMHi3b",
	"jFH2GuUb9SgVwF5zNZ0ROcOJwni+woFqSZgi88ncDBjEoZSTDVCTtILEJkHunih45xj1Rzt3bONIaeZQ",
	"HxFRk0jwCi45Z24zCL+KI7RLKb3XepYPnfSxVP3reN7fMiFt9gdbiueMSs4Cp/4MNpDVxRJRqrASNynM",
	"i6UugKF/vsRc14qyGfMLLPVtYY4pSZzY+dAnNc2s3WCfFvNnSTiNtXKbOiCdOBSS5UHhJop5wMlk0jG8",
	"wicZ0UUayl1RVYpZzf92OONXgwrB1AxOF2aqIYgtWZkgVTqrqxYRyLRwub0XA/Nyt8uDrc/TYWw52G/g",
	"LOl1dXQkYgThMcZHjHciG7CZjKxafRgwweklkckqYIeBkISWadhxMbsm9KX5eDg4hj0E7LQ2ZTfozzPA",
	"fIeoecvZkoMQwcS8HHNJcBYLFIwpgpp7qZftBybvOPnfdsTEFqjrKb2ukrCCeWUxJ5j7HDVj1mI5Nq8i",
	"nGpmllKbz4zujRVcoq1REuBnaUO66hL0GVoVa0z3lHWJ5xkguMozbLgQiRwSsiAJkswETbEkKTgHmrgb",
	"hHOamxlr0Uh1OhYBwX22AvTr2dlbFwSVsBTQ1+/f/fL8H0+ODj9M0Sno7Ym++wYtgQLXcVnzazMn42RJ",
	"KBKm+MuC8Qh0KAScXxaCyAxCOBErxuW0iRpRrNeYXzcG1xmeM4ReSnT665vfXr04pydvzpAJ5TLFLz3A",
	"JIuDObUZzudULSkveM6EOhEskJax5A9Dla9htpxNUSEIXaquSkNtANkaN+eUwpJJotv+JxIAKIDWo9nT",
	"b4Ika54UDduUhHQ4i/CeH9zVrMSlK+RMq1qCjJc2JfJCkpBzpFrTwEb1rcmVvpCn+3gylbyAkJHQvblx",
	"mvLObX2Hu/42osTUcqZjBEa3J7qBv1EHmhriA2cP/7uIJsWOmkbDF8mLFZHVGW6LOYOIuEiJUDs9jWYH",
	"2DCNjhaKu9P5dfg7B2PoxrLK1MeLVJfpGxaI0M5sL5fQgLcGXAVJc9qhgX0NZN5OgF84ZLOty8wSA1n3",
	"hEphSx1ayUKWlHEQCGeZkSxIckyF9n4jY9uL4JEWaGIc0vUpCE1JgiWoabBszCXQCtM0KzUV0oOIItPa",
	"S7uuhYvtNYClyA6yus6VhBSMI324igT3EusXrQP1Ea73zDVtjgkXRpymSj0o9uLarlT/NwylVi4ZsnVY",
	"0LnCBuxdkhQQnrNCGmXqVuUDUu2lzN1BB44Dy6GRua9YM/SpUVEDssyQ057zyAIR6QKmJSfLJXCEkR3A",
	"khOV0dfn1CcNZRIVeQSvLFpC0kOFM1bwcslhqWlKqGTojYm01aoNcKoU9rMNJplXN1d3nJ1TXahOIEKR",
	"m7EaPWX0K4nUCRjhGK9GwB8RV+2QX2rryhHVLZ3I4KFfptb0c4KwFZBq0WkIibNLfC10AHw+1eWzEV5I",
	"TVmNjHGoGFs1z2R4RiqreqEypl19b2iPmRBkqewWGa6sjZcjnafDapU5GegEVenfMTvT7EO/lJIXGd4K",
	"AHeaQNsQ3J2irKYoLT+LKbumjtI0Hh+EFuxv/7HB/K/Y8mcq+XXYyGi0iTvL2iZctCxH0PNVdehaf3OL",
	"te2eMXc43qF4cN5Eq3iTMa3jFz/NhPWx9PGSz5vUYUZjO48fTk3G9zzDyceMCOl+WNpCq2XmzWQ6+Z3p",
	"TxngjX4mgDHtLPxUYClrFcEqZLkQsbaZR4k6HfXH2toRXpbt9XZ29RUG9DwzjVtGWjlgOV6IFK3pA7aI",
	"/eSis1ZMSCSUInchdQhomjNC5czs+8HxYhhdMp6l2iooKPmkbQtvPERSoJIsCPB6MXzyic6eHBw83Ts8",
	"UBbfrJgXVBbHB4fH8N08fYqP5t9++3REVS1b58tYU3ZufeKuzyoSQYLmcQyvZyUlGxPq392UjUDFe4Ha",
	"H/YODzVqrTE9E3xznMLmCT2cWXhnZhWzw/GIxreJ6lLuuV1fKE2Vskta3UToE/2koCkstLZJ59dINzP/",
	"1Y2DG1yro9hhLsfKJIOgm7LlRLRNByc1+TPfzsmnXrtjqNStARKQuWdeAZDqfmiBScY2ppxV6Oraq3Th",
	"yOZ1WWRwFb4gEpAUnMjrUwWdocIcC5I8K4wY1lBrQqhfKw5aSakTeuaAOXDX2vz1i1OM//rfM1elXQ+h",
	"vzbH+OydkKxvb2Lxbk5fyIQNbYALs+Sj2Q+zQ3MAAKpjvSZHs4PZwcSLa97HhVztl4WMc2YcI4rb9GFK",
	"mTnat1yVTp7W3tGJVEGrmuybsvqfp6GXbPTE5Xs2U7TGV2RdrE0QLnrydLXdEzeHB+vAJv6ww2L3FXrC",
	"5e6rwvKhUUqw9lWjqvp7X9sjryx5d1vVqCoZ3tf2qMbzmsget7//oIjpc/T7Dwq55jjwfqJYavJBjbBv",
	"fXb75lSzj+dOhET5zJa1MxdYz+bMuXF2Q7ZQIE4HAQ+GEOVgl8S2Bfn72n7vlczva/vDOCa6AWO4UoNB",
	"3lhwABNPMZA5fjEdHrnjIXBHQUfzx2+uyyOHfJEcYvym+ykV+2mx1u7s4KHnRbHOkf+80YuTU/QHo+Wt",
	"orkrrHPTP0GWJbLVALtkIldl/x5bDjcgmq0qa+qh1yinHxMUUbqZwsDOPW4ad1Hq542rhDfKPC2fWozV",
	"fPbampcDBzT0H1McYHdKuJIGHXuiLHk9jHmqAq1fNPvUGEd7zDxF0HxMaEmEcbGrhojbx4UkQzhNEUYU",
	"Lmtl0NEa1nPgs3N6tgKkrFegUl+EpSjJiDpa2SO1QFiiDLCQaMkxlegrzpj8CjGOvvoXI/Sr2Tk9p285",
	"S0DoCAbrX6/BQQRKlfTB4pomK84oK0R2jebXltWnSB34kEOhai907EN591MbboWFKfCTF/OMiBWk6JLI",
	"lclmPNYL/PG8ODg4SnBO1F/6D1CAnjG0YFnGLlHeCfIUXbMCrfBGh3hc6vrzpqPqYHbm8TndQwoHp0Wi",
	"hprGJp7iNIXUfql+Rl/rSwm4NCQpV6Vb6ys9j2LiGzfbS3PTGJ9NrWPP+xqd8RILhDOdq47qZfLLyfQF",
	"13ZTYYp0VKoJkFEnXoU6E7JQZ8aMCPlNQM5Vwaf/Mg7jhphrxyC5hGTF9U0Edj9sOeSZRwqXrpo/oa/M",
	"OwTHTwafuh+EoDI+/SGSSrf0RRWHNdtAgxNvR1K9UnPFRFUdkJvLqvp4OxJWtUkGSyuNh15xZQgRElh1",
	"QWXbhUWVnqpXVullxCSIns1e9Qfkk56hR0B1jn+bEuqVvcvqFVEKIjVN41WSm4omlsLepWR7hia3J6Ju",
	"WzywpdhPvOyH6MG2nSxhMAFC/sTS69t7BjA4V8CyFCCdZZ6xJXI3x3XqRF4X7ZbDT3Z7AP7TdIFXic8e",
	"dyLnmHdlobobnThbF0MP5XRQBcl047nMbh53Xmy/YT7gPNh6zXenlxG19T0kwrN8iBg9Ve0eRZOHuGK+",
	"X6Wt9aKvzH3btQ6qZgowsQ2IZKWHSBTzKllOPCqjIMWJ99hOTDyWbwSMFY21x/0HSMUTlsLdSMT6azwB",
	"btJhMS6i1dQ4nFaxtzS1Ua73xY1/J4xT8kqddfarEpB9HFSGkXxpfOTXCxzGTY+ck8C+Fw3fxzpVoagv",
	"jXdqRav6mGddFZB68NzTb9g3SlN/ebzjF1HqY52HrbGmHXZsi012YcaGirK3KaaARDY2Ufjg9Bqu9zXC",
	"4M8QEbYKeqdsOHFtetySfm5M5Wed4+Qj0BS5eusRH6XJRG05Ye4kBLFdzvzLPPo7EljS22I2UbK7gjSj",
	"fDx3Jtir8uQRca497o8HElGVxC3Jvq82ZcaW8RCSU/3ADIdEl89hy0j8iCLCT26ssbzyii1doMd0kIUh",
	"dstR7q2ML3TzN1ggKavFBG9YdTEZYS62BPp6wTiy10RTtMAkg/QbRGhVLtxtMJ1MNgvecOmC7HrWGzmU",
	"HuiW7fcdeAXv77fYHuAD8IT3g6Z6yufpflW3q4/8L9799OJZ1XqXNyX1maIy88/D2rANU5VnGx//WHY9",
	"Udbrbi+mKjDvdZT0XZK766C6C9Lu5sImXCMwQOQqaf/xlDtWIAywdSlc9hi6r+6PkXuDsOeHZeUO8Jv7",
	"hS7vt900xP/tG+OPSqGtFF7XpOiuBHr5esWNxfhjstVfLtmqKYP6b1+8dxTutwQacIuiBdCji03su5ID",
	"XUQ3L1rsmGhmki9e35u7oBEJ837B5ypffjdKoVa9OkCK55gmkJlkS10GVqLaGxSzR33xxeoLW1YmxMUp",
	"ZCBhOBu/MO3/PD72XnrRzGwvaMurdbOgR25+kNw8pBCBz2BenYr7yc1mQY/c/CC5eUk2MMfJx+H8/E/X",
	"4/5ytFvUI08/SJ4ua8AOZ+qysug95upyWY9s/TDZuuDLEXbHW938/rJzQUuG1gFNj0b1A+btsjj7MN4+",
	"Ld93uJ+8rZfzyMoPlJX70lDrnGyTUe8rI7P8kY8fJh9XrwcO42TT/m542U62DUfrno88/SB5elgZUZ/R",
	"alVE76sh/ejBe9A8vYW/4zev01/iiPjI3A+LuW8rt8ew4GN2z18iDiLECK0Mn5hgq5JydinMzCyh2IeO",
	"VCPtDmgmHNVyjYRJNxW6TpSua7Ow0lDMbhYr/aWxQ28+hKXTdiHz9o1wLFeBF0tgg7PCvDIWyv71PneU",
	"YWuNStY5cMGoU4J2GO0WFV0VEb2Of1rScQ3ZD0coLUgG/Tz4C8ngRhy4e8ppEB8O3W6cQWGw9phD8dck",
	"f/nsVfe+NcjfpnrMXWxZyxoPh2icLTkIMcQGfOva7toMLCcKWYIrTJdGlzfrOLn3fhnisNAvVKtWboXa",
	"BjTPdvsvQ6ck1VWftRUJ6aM9qLkjZyzr3MtvdYNR1V5clRf3Mqaa4z6WelFL++LrvFgiOHIX84wk++VT",
	"hnG6n17i5RL4LdVPdg9+3msUO5QZJFmMccjw9b73+HMMYe9Uw9e23ejXHVXnE5aC3hADLBvdwT7U9TLd",
	"rcL0V/bFV0LuyhlskHhXurE2TazaGTbJVSmWWIBEC87WCCPNrch/F/uxfG+jfO/nz/8fAAD//w2aVYnR",
	"3AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
