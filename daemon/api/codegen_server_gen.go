// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
