// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9f3PbtpJfBaN3M23fyLKdpH2tb/pHmrSveZc4udi9m7k444HIlYSGBFgAlO2+8Xe/",
	"wS8SJAGKlGXHjf1XYhFYLHYXi8Vid/HvScLyglGgUkyO/j0pMMc5SOD6r5fvf3r5gtEFWR7jHNQvKYiE",
	"k0ISRidHE7kCtCizDBVYrhBbIP0DyQARgVJIywRStOAs1x+ogjGdENXzjxL41WQ60b8dTewnDn+UhEM6",
	"OZK8hOlEJCvIsRpXXhWqnZCc0OXk+no6eVlybNBoY5XjS5S6r+HxvM/1GHCJ8yJTn78Vk2lgyJ/XQOUv",
	"JJPAu6NmREhFAlCNFBFUq/Do1cd6bCIhF12gpiWCy4KDEITRI/ThE6Hpxw/TDM8h+3GNsxI+/v1MzaTG",
	"/+38d0jkicSyFL8VKZaQThWLflww1p1Z9QPmHF/pmb4mOZGhOeZEIo0rSlhJZWSCul2YtofTyYLxHMvJ",
	"0YRQ+d2zGh9CJSyBGwTYchOhM7bcFZkxChDaI3CT2rPZrEFtQdIff8Dfw8Ez+G5vnhw+2Xv2FL7b+/5p",
	"eri3gMOD9Nun3z0F/I9BlFcLTRQ4gbcaOZx1saWuSc9ict/7VtAxS3tGYVqGEKYpIlRITBNAAjJIJPPp",
	"NIshwVKIrC76ZIr//BHKw+AiM7L7DstVFCclypFh7acxiqR3qBEz3jh0TYF0fji9gPnfgwRQ+Gxky3i8",
	"tsJDxJefxwuBJEMCaKrWpEALxntQEb00iizQJuNvaem9hwxfvchKIYG/SsO7XWI+I5KiauN0G5/ImFQf",
	"GNV/cgUuQggL5pykG9aoxkktVBrdgKn9eiOEHJBN6LAMemQCFwRxlsUUk/0U4PZ/cFhMjiZ/26+tkX3T",
	"TOyrMYP8OrFrIL5Y3CqJ4ON9jk/6WomrKBgVZuZPDg7UPwmjEqjeI3FRZCTR9sT+78JYJDW8vqm942ye",
	"QW5GaaL+9r9qmTXSr2jw7G4G/wmn6D38UYKQYSwO7wKL3ygu5Ypx8iekYTSe3gtifH8XWFgM0CnJgZUR",
	"TH64C0zUgSAjSRCFb+9GPl9RCZziDJ0AXwNHP3OuV3EAnzsREYUGSQD9RvEakwzPtZ5rYXPttIxWI8/5",
	"nEiOJePGTNeHL84K4JIYRSOq3/uwsr2vp5OSZ2GlXe+2H3SjqQP9MUCx56VcnbJPQLsIwWWhwJxjTcjK",
	"ilfHiz1JcuhsstPJ5R7DBdlLWApLoHtwKTnek3ip4V3hPJsc+WAVttIN3j8Rr5frE5qO3c67k0n0sXYT",
	"dW13cwZW8LRZO6yT2rVVF4vMsE5vK8yHsd92c1LQIpKd5NRZ4xaVXgFoTrnmQ6fFsSVF7Pvbat6xFrXk",
	"d1q8PD55DwnjaYBzGRYiICBTJYk4+MEZT10bUPprpjqAOrJsEkJrMelGU4uYAWqRCRH45fHJ/zEKg+2f",
	"mhQdI2iqPTTPs4wllS/kc6xZkjaglyVJQxZ3TijjYXoXjMvQlxbBdTMHaNpUAiQNk7vyYXWp4wSmwnx+",
	"JSF4GPKRiHMWQx5iQsIya2huYrUG8KJqrmSaimG9Xh6fqPar+bDmv85Va2W4A4WBiL12rRUvGSWDZ/TG",
	"NlaEZKUkFERYDFS3tMyGInRSNe9qvqyy7RUJNWG8+dYT8FDyx4/z94XPTZxlbxeTow+DsC3n4kpIyJ22",
	"/ljBVMzbHbRf510ZzFlq/jNM51g4b+we1lY7QnLA+Xh4J7pf8DTnc8+Bn1q048ywKAanGz4uK0DqrLqa",
	"oxyEwEtApYAUza/0SRrBZQKFRBcroOhUtSUCFVgmK/UTB0Sk+kVBMr/+UUIJKAO61L6J7t4TxARXngS7",
	"NUfcE6EZrABzOQcsqwnoOfmz2KjDbKPca9tHZMu3m4rodIyUKOKP7PIOlCr42EFc/96RESLOFRUVeWpl",
	"NGcsA0wH7oMeCEXhDAu5663Wwbxus9Abux55MxNPrVw1aRGWttUcmaWIrInTL1QbxOi1t9nsSNO9qXeh",
	"HUE88XegXcGMnPCS+nAywMY3Fq6zMDYj1N0TLZwKTJxV1WSeZ2AMs5Z6NYonaFMLWAMn8mqz+eygeH0G",
	"oBSjJlaojt2SWhMNbHXmDFVqlActa9WHA5a7t7o9sLXV3aW/xHLA2cWSqzHBBuZ6AAcuxBd9HaoWdVdx",
	"OI9p1UTtmRg5P7EQigS11U0o1n7Zzlxe2Zunbc/vrn99gB9ot7qOnuU67EDuOnon8g7hXJvnWsaGCqzr",
	"9UpCHhLU1ly766MogvKSrCD5JMo88pFkKTcOmQrLDVcp00nKi8CWej2dAF0HASwyuDzP8WX4VGC+Etrz",
	"VWK+BBluYFl+jhN3Rg4aaVEnAePJCoTkdln18eit11SdajF3gRXDiVfY+8hOwyLDCeRA5XnBMpJcbXRY",
	"uvbvTHMFgsP5AHIUnLCWCvfoyUGwkidWqtKUmOuXdw1p673RsQDqVdlZIiJhBYyjmyjnAuRmh6lp5o3N",
	"Cpax5UZynrp219NJaYIqhiv4jvYtiom39LyFZlaPWSrewvBWQVPkO/Id5PLUv+HzBXrq7oedrAbkzBMI",
	"n/uOSzXpPWI2aNTZPdR+t2R7lWwZzTV74fyV1dc9kjvXkFkXkyWRq3I+S1i+zwqgYp3ss/zpfsI47DtA",
	"mtxNfbidrjV9h2lc3SrqYhq5S8HwXm9U265pJXGfE7KxmdwI6TtF940dqIkubXqiPc3ddkFHVmMllRpS",
	"LwK1+dCyR7yNstN7mbE5zs7hsgij02pxzrQdJTbDOh+viKbq4LjC5xngFHh4myZi0+eCgwC+hjTcImNJ",
	"/3z9BltNoqnfzuESknIsjFoPKhARc7rVSJyn1nnfnbW33XfYtrNN07NIu7umiQQ6H3kysF+24sONd8Lm",
	"2uiR79gi8cW1JdwtQYyLXUAWYpxvUNnRNEDBXhFtraHmrtoAUm/LlYYZupu+qTzcu9xOLdTt9lPbedOG",
	"6je70ebkLZY726Oi/ok1Jtnw6/yEUSV7pKlQPG2TxM5sC87+BDp2S2ho9BQWuMzk5GiBMwHtcAfXVDvC",
	"eQmILJBcEYHMERmtsECUSTQHoMhKM0pLQJIhjM5o7cBO2QVVOKGErYEb/zVGuZo1UB1yWgAnLJ2dUe2Q",
	"lysIfEVAUzE1IW8GA7FiZZaiOaCSJitMl5BO0RnFNEUV8hcky1QLAVIhpmc604HUgf0MC3kuJOajtxgv",
	"Nm0Y3xUhcDaiQ8HZmiiFZFi3IYSlarrLPalGprvvlZRaD/uIo1yCMwgfPm9+8tLLsLm+7GLyl06X5x4z",
	"ay51FLnPjaZad5RoKXgz162OS5bsu9XvBuh26t303aTdvVY3Uu611N26bn/Nlv2OTttgSzfnMcgLxj/F",
	"dg7gnPGRXiRSDHeFN4Z/VYTARZ1j1PTtwSnwoXSXB4Ox+k33CHpT29h37/mKqM8v7P2KOeB40K5uX8sV",
	"dbyVSwmIhKY0MHfyNZ5jIX4FiNehy4JDRMkWjVMbLfO5Dc8gf8bUsmgcBWPxO3pI29qCM6MFyRO82R/m",
	"+Fd9Rzv9VafRDn/Vqc/Zr76P06aqR0yHevPqqomIc90zmM6XHCdwbsym5gZaZ8R15R5wejW+0++M0O0G",
	"FEVGZNxB3Q4F1Z7S6Cxb+Icxa425YQdWy/vGzkqtI64bPB0vJ/0OylaLrXbb1kqCYT222mW14NMF6yKq",
	"0+9CiSf6dxeQ4/ZdHcdjPumkqKHEfK26BHe/aAJOlXxjUdD/t+k3Gg0TNKSxM7jqM4hOmsJc5+wQutQ5",
	"srPQSijCSVgGQGjakiEhGcdLQBp9JDA14w0mxcnzY50TtylKyzKlcbVg8I0y90ZSeCfyZ2Sg62IOc9/j",
	"vKaG5n+QkTp1tAtB/9wEoX+abY7gMgQ3cGOzGeUvD4WIRQHH/OBjXd3b+Bxv37u8a8/wF+6Y/Zxe1uHn",
	"Zr1r39gp2ti2t3KGeh37Nu4bO0Fb5uytq86o43Npc686MooLEv69So7a2jXVya8K2eaqH5bhJbuFF3Vp",
	"rv9i6AbORkSciwLwp9hNW233dHDPCT3XvqzzHPJI4EvVRFzgYsDxzHDK8KXJhYpWTR/ZUgcsNFHpjNuY",
	"ZjWnIYv1pg6uxlrdxrFV9+tbqTd1aPlHyDtYp8LZ2MNPo6pDYPImxWscSU2fGDnN1035Ot3FoJfkdvuc",
	"BupAhGhmcHqJQ6bUyEudnji3YSGgFYDr/ri4MdAIraFF4+hGALQwrislGtTxzvm8tYb3A1A6PNs+Zm/8",
	"/csOwvIqEJUlOAjCiXSBhr0Be9vfEG0RhrddON15JQ7nprDQthIYAHXdsYa3Cb72IFzH7pSGROvZJeEv",
	"gHZEXn25FArFa8lKIzivefvkwvMaQXkd8vSb0JX++4VksHUG5Z1o6O03YE/DD9yATY+ttmCvawfZkQFr",
	"cfBV8Z7hC/dtU2VWIQATynQ4apmrkVdYO3zMWYz7KNSQ3/pHuv8uoYRAGnfoiN2fQTxsnXbgdlZrp0WI",
	"jG0t3aKIPqKGaxS5jqhaso52GRYSGbKpQzJOEV677HyBGDchSxa4UBas9ktzwHo1r8giQO9hVOkokmt/",
	"jieyYnrvjJzGcRNihSS5vg+njO55f+0rKSlpCoubI2wG1fgylkVzqXCB5yQj1aXfYLnf5nZ1pVgyrtLA",
	"je5C65nbi9DpZM2yMh+R0luD+B/dM+je7S6Dqteo+0mPUwHqtWfTG0w7nCmMFyscqAeJKTKfzO28IRxK",
	"OVkDNQmzSKwT5GI1ggFA0TthdyXacuuaMdRHRNQgErySku5CtZ2fV6cA2KlUN8h6lI+9/LFc/evcfr9j",
	"QtrEULYULxiVnAU87xmsIWuqX6KOo7UWSmFeLrVBpX++wFxXw7Q1gRZYap1UYEoSp14/bjI5zKj9aJ+U",
	"8+dJuOxGfXXpkHRqX0hWBDdNUc4DFz0mU9Mr7ZYRXYaqWhV1LbzV/G+HM345qNRdw3h1GSIag9iUj1kK",
	"dSkNVw8rkITpapHscEtvAr32Kr2MK9zRhNNjoqkJW99GhMGRVdIuV6JaDRng5ILIZBUwXkFIQqvaLnFd",
	"mBP6ynw8HJxRFkJ22hiyH/UXGWB+i6R5x9mSgxDBzP0Cc0lwdpPMfQfiule/N25udiHNHsTr4em6biPo",
	"3orEiKhLR76pE7WDuefBG6mB2cg1BIWs+zNsAY0DqWEooLlYjs3XDCe9G4I14BvoHqwgIW3Rt8DKlNbz",
	"11TYz9GqzDHdU0Y7nmeA4LLIsFlPSBSQkAVJkGQmYJolSck50MQFDZzRwozYiERu3geWgX3idAXo19PT",
	"dy4AWpEZff3h/S8v/vHk6eHHKToBrWjQd9+gJVDgOiZ7fmXGZJwsCUXCVNNbMB7BDoWQ86tmEZlBiCZi",
	"xbictkkjyjzH/KoFXNeamCH0SqKTX9/+9vrlGT1+e4pMGLepJu4hJlkczakt5nJG1ZSKkhdMqIPWAukb",
	"SvKn4crXMFvOpqgUhC5VV7UhrgHZooFnlMKSSaLb/icSAChA1qezZ98EWdZ2ZRixqRjpaBaRPd9t1y5t",
	"qksOTuvizIxXJizy/EDtQ5uN6M/JpfYR6aOa5CWEbJJ+FYLTlIeTxr9U3bLFrfoOnIuKzNMximyjR8/n",
	"66hzXUMgAkcw/7uIlg0ZNYzGL1I5RERm10gvD1kPKRFKA6XR/EYbMdrTQq26dH4V/s7B2Pux/Hn18TzV",
	"9ZiHxUR2a/9UU2jh20CuxqQ97NAcgxYxd5Nr4IC+ZssRolf1+ZlKfhUWv1ab+Gmya0FHS9oEj4Z1hz4R",
	"jIZJeQIyIunzve3VRslBG8vU3WYIRpANBHPeZpUsRZkcE9os6xWLeKjb9tfQcnOr9uSYH3LUPYdn/Q++",
	"lOuUyjO7e/xypJWk1bVkjSIJVP8iVApbOd7aFWRJGQeBcJYZuwJJjqnQd7fIOBJE0H8GNDERKM0hCE1J",
	"giWoYbBsjSXQCtM0q+xUpIGIMtO2q45VES6rzyCWIgtkdVUo+0gwjvRyjaT1ERsI0UTqE1ztmbjMAhMu",
	"jDGVKuNQSRHX52P1f8NhNXPJkC04ic4UNWDvgqSA8JyV0pjSblY+IjWLMhd0GohkXI5QjK1ch1bpQMgy",
	"w07rVCILRKRLlZScLJfAEUYWgGUnqvIuz6jPGsokKosIXVm0Ir9HCndUwcslh6XmKaGSobfm9lMbtoBT",
	"Za4/X2OSec+Q6I6zM6rrfgtEKHIj1tBTRr+SSEhWIByT1Qj6I+7LY3phkw3gWQ+dhDJLHcMXnF3gK6Ez",
	"WYupflwI4YXUjNJzGzezsTXFTWGXyLsTXqi7adcUde1tF4Is1SFEht8dskp8RHTBoLrMTqU5vVP5hs1C",
	"M8vKLwHrZXZ2Ejgrx60zqaqjm6WOnUdPGU39hIXnDMapiQyYZzj5lBEh3Q9L+8pAlSE9mU5+Z/pTBnit",
	"38hiTKPzR4mlbBSqranmIvi7pi8l6iS7ORXKQnhVtdfccrFBA3qe1kFADcO1AljBCxGsM3xg57CfXPD8",
	"igmJhFK7LuMBAU0LRqicGbYODufH6ILxLNU6vKTkD70TePAQSYFKsiDAmy9BkT/o7MnBwbO9wwNlL83K",
	"eUlleXRweATfzdNn+On822+fjSj2asvPmr3Pjq29I81RRSJI8MgQo+tpxcnWgPp3N2Qrj+RekPaHvcND",
	"TVpris4EXx+lsH5CD2cW35mZxexwPKHxLkldqVq36kuliFJ2QetLKv+iXCmWdH6FdDPzX904uMC15okd",
	"cAusNlAIOce7bmXbdHDOuT/ybs4NzYpsQ8+DDUQCO8WpF4dWXx0uMMnY2hRBDcU6eKFSjm1el0UGl+G7",
	"QwFJyYm8OlHYGS7MsSDJ89KoYY21ZoT6tZaglZQ633oOmAN3rc1fv7gTxL/+99Q9UaRB6K9tGNeePWv9",
	"sBNLd2MrIxPVvQYuzJSfzn6YHRpzDagOxZ88nR3MDiZe2tk+LuVqv3qTo2DGWaSkTZu+r9LJkb5tqN8N",
	"mTYekYzUzq2b7Js3pa6noWcc9cDVY45TlONLkpe5yZFCT56ttnvf8fAgDyzij7f40lNNnvBbT/WrSiEo",
	"FVr7qlH99NGmtk+9N3n626pG9Xs5m9o+bci8ZrIn7R8+Kmb6Ev3hoyKusfY+TJRITT4qCPvWj7lvjNZ9",
	"PHcqJCpnthiyuTZ9PmfOtXU7bAtFsvUw8GAIUw5uk9n2NapNbb/33ova1PaHcUJ0A8FwBaqDsrHgACbU",
	"ZqBw/GI6PErHQ5COko6Wj99cl0cJ+SIlxHi59lMq9tMy187H4KHnZZkXyH/b8+XxCfqT0eoG2NzrNqXp",
	"nyCrl1sUgNsUIvdg1D22HG7ANPsWgXmmp8E5/ZK2iPLNPCfhnJmmcR+nfl67+sajzNPqnfHYUyReW/Ns",
	"9oCG/kviA+xOCZfSkGNPVC+xDBOeukj/Fy0+DcHRHjNvI2i/pLkkwnhQVUPE7cuakiGcpggjCheN13lQ",
	"Dvkc+OyMnq4AKesVqNTXFilKMqKOVvZILRCWKAMsJFpyTCX6ijMmv0KMo6/+xQj9anZGz+g7zhIQOtrE",
	"uk8beBCBUqV9sLiiyYozykqRXaH5lRX1KVIHPuRIqNoLHadSeeob4FZYmEKMRTnPiFhBii6IXJliE0d6",
	"gj+elQcHTxNcEPWX/gMUoqcMLViWsQtU9KI8RVesRCu81uE4F/pZJNNRdTAr8+iM7iFFg5MyUaCmsYGn",
	"OE0htV/qn9HX2ucMF4Yl1ax0a30B43FMfONGe2XuheKjqXnseV+jI15ggXCmSwmh5utN1WD6OmK7oTBF",
	"OmDZBDOpE68inQnjaApjRoT8JqDn6rjkfxmHcUvNdePFXL0YJfVtAva/6j7kjXMKF+6RKUJfm+exjp4M",
	"PnU/CEVlfPpDNJVu6asqDjlbQ0sSd6OpXquxYqqqicjNdVUT3i0pq8Ygg7WVpsNGdWUYEVJYTUVl24VV",
	"lR5qo67S04hpED2avZgN6Cc9wgYF1Qt/lxrqtb3L2qiiFEZqmNZjeTdVTSyFvQvJ9gxPdqeidq0e2FLs",
	"J15iTPRg282jMZQAIX9i6dXu3sAOjhWwLAVIZ5lnbIlczFSTO5Gn9fv18JPbPQB/tr3AK5RsjzuRc8z7",
	"qo7wjU6cnYuhh3I6qGMg+ulcFZ8Zd148xjmIAifw1sUUDDgPnoB5Urbuc5uXEY35PSTGs2KIGj1R7R5V",
	"k0e4cr5fZzRuJF+VFnnbe1A9UkCIbfgaqzxEopzXeZTicTMKcpx4Dy7G1GNVeGesanyH5WqMVjxmKdyN",
	"Rmy+yBiQJh0W4+IPTQnqaR0pSVMbk3hf3Ph3IjiVrDRFZ7+u0L1Jgqowki9NjvxyzsOk6VFyEtj3Ypc3",
	"iU6duvClyU6jpugm4cnr+p4PXno2G/atl0O+PNnxa1xuEp2HvWNNe+zYjpjchhkbejOnyzGFJLKxicJH",
	"Z6Phel8jDD6HirCP1PTqhmPXZoNb0k99qP2sc5x8Apoi9xxOxEdpsnM7Tpg7CUHsvjbzZR79HQss622d",
	"oyjbXa2iUT6eO1Ps9esxEXWuPe6PBxJRv1hQsd3FhqUckw2eC01m3fqlbvwYEvaFhIS1RULp6Ywt41FF",
	"J/ptSA6JLrbFlpGQIiUwPzlYY9XHa7Z0sT/TQUanuF0l4163+0L3g5YIJFXZquClu65qJcxdp0BfLxhH",
	"9uZwihaYZJB+gwitH/hxOlcnYs6Cl576CSU96o18jA9Ui292J3lPVN3vnXyAW8jbzx8011M+T/frgn2b",
	"2P/y/U8vn9etb/PyrDlSVGd+PqoNWzB1McfxIbFV12NdTOnjLZPbJfndZyvpLtk93WDJ7pq1t3OHF64o",
	"GmBynab/6PgYqxAG2LoULjYYuq/vj5F7g0j4h2XlDrhK8d8Hu99205ArEd8Yf9BLfvM1iPfe1P3m+4Dr",
	"DM32R1+X2He5/31MNy9/3TLTzCBfvJatn2qJZqfpMmmmnXA+A3thEMkpfOtqb9zkYvI2V6X/4tujPe6e",
	"4fEEYkQpA78AfF3J4HaM7UY1+wDjXmCaQGYkVBdTlqjxTM5sqPX96CP/y/nIe6Q4hQwkDBfjl6b955Nj",
	"7xErLcz26rwKejATepTmBynNQ0pE+ALmVRC5n9JsJvQozQ9SmpdkDXOcfBouz/90Pe6vRLtJPcr0g5Tp",
	"qvjqcKGuKu/eY6mupvUo1g9TrEu+HGF3vNPN7684l7QSaB1q9mhUP2DZrh95GCTbJ9VrJPdTtvV0HkX5",
	"gYrypgThpiTbNOH7KsiseJTjhynH9WuiwyTZtL8bWbaDbSPRuuejTD9ImR5W4NUXtEZ91/tqSD968B60",
	"TG/h7/jN6/SXOCI+CvfDEu5dpdgYEXxMsvnLRkJ0Em1iiq3OjblNZWZGCcU+9GT8aHdAO++nkfIjTCKw",
	"0BW8dMWhhYv5md0sZPlLE4eNaQmWT9tFrpvO+tmz7lsysMZZaR7KDOVle597CuR1oJK8AC4YdZugBaPd",
	"oqKvVqXX8bOlgzeI/XCU0oJksFkGfyEZ3EgCb59zGsWHw7cbJzIYqj2mMvw12V89SNa/bg3xtwmfvYsl",
	"a0Xj4TCNsyUHIYbYgO9c29s2A6uBQpbgCtOl2cvbFbbcQ7sMcVjol55VKzdDbQOa56/9F5ZTkup63NqK",
	"hPTRHtTSUTCW9a7ld7rBqDo8rv6Oe7NUjXEfi/CoqX3xFXgsExy7y3lGkv3qkck4308u8HIJfEeVrd1T",
	"rPeaxI5khkiWYhwyfLWfgxB42WusvlcN39h2o9/dVJ2PWQp6QQywbHQH+4Taq/R2N0x/Zl98jeq+fO4W",
	"i29rb2wME6tDh022XYolFiDRgrMcYaSlFfkvlj8WVm4VVr6+/v8AAAD//+8mEPFo6QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
