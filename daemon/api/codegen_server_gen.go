// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
