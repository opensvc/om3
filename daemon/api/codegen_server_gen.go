// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
