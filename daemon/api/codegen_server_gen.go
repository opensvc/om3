// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resource)
	GetResource(ctx echo.Context, params GetResourceParams) error

	// (GET /resource/config)
	GetResourceConfig(ctx echo.Context, params GetResourceConfigParams) error

	// (GET /resource/monitor)
	GetResourceMonitor(ctx echo.Context, params GetResourceMonitorParams) error

	// (GET /resource/status)
	GetResourceStatus(ctx echo.Context, params GetResourceStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, params)
	return err
}

// GetResourceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceConfig(ctx, params)
	return err
}

// GetResourceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceMonitor(ctx, params)
	return err
}

// GetResourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceStatus(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resource", wrapper.GetResource)
	router.GET(baseURL+"/resource/config", wrapper.GetResourceConfig)
	router.GET(baseURL+"/resource/monitor", wrapper.GetResourceMonitor)
	router.GET(baseURL+"/resource/status", wrapper.GetResourceStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
