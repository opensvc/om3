// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
