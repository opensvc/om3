// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
