// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"29ev/x8AAP//7z/eJG6uAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
